# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  pull_request:
    branches: [ "hotfix/1.0.1" ]
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - name: Enable Go modules
      run: go env -w GO111MODULE=on
    - name: chmod
      run: chmod +x init-gravity-action.sh && chmod +x build.sh
    - name: Auto Init
      run: ./init-gravity-action.sh
    - name: Go Build
      run: ./build.sh
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACTION }}
      with:
        tag_name: V1.${{ github.run_number }}
        release_name: Release V1.${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACTION }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./cmd/treasurenetd/treasurenetd.zip
        asset_name: treasurenetd.zip
        asset_content_type: application/zip
